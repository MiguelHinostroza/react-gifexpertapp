{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inpuValue","setInpuValue","onSubmit","e","preventDefault","trim","length","categ","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"iNAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEVC,mBAAS,IAFC,mBAErCC,EAFqC,KAE1BC,EAF0B,KAkB5C,OAEI,sBAAMC,SAZY,SAACC,GACnBA,EAAEC,iBAEEJ,EAAUK,OAAOC,OAAS,IAC1BR,GAAc,SAACS,GAAD,OAAYP,GAAZ,mBAA0BO,OACxCN,EAAa,MAOjB,SAEI,uBACIO,KAAM,OACNC,MAAOT,EACPU,SArBe,SAACP,GACxBF,EAAaE,EAAEQ,OAAOF,a,+BCPjBG,EAAO,uCAAI,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAUH,GAD5C,6BAFT,oCAES,SAEFI,MAAMF,GAFJ,cAEdG,EAFc,gBAGCA,EAAIC,OAHL,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAabM,GAba,4CAAJ,sDCAPO,EAAe,SAAC,GAAsB,IAArBJ,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIrC,OAFAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAGpB,sBAAKgB,UAAU,gDAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,QCLHS,EAAW,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAc,IAAD,EAEbd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAqBvC,OAdAC,qBAAU,WAEN1B,EAAQC,GACH0B,MAAK,SAAAC,GAEFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAKtB,CAACtB,IAEGuB,EDlByBK,CAAa5B,GAAhCa,EAFuB,EAE7BN,KAAce,EAFe,EAEfA,QAErB,OACI,qCACI,oBAAIJ,UAAU,2CAAd,SAA0DlB,IAEzDsB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAEKL,EAAOJ,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEdpBkB,EAAgB,SAACC,GAAU,MAIA5C,mBAAS,CAAC,cAJV,mBAI7B6C,EAJ6B,KAIjB9C,EAJiB,KAYpC,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAeA,IAE5B,uBAGA,6BAEQ8C,EAAWtB,KAAI,SAACT,GAAD,OAEX,aADA,CACC,EAAD,CAEIA,SAAUA,GADLA,YCtBjCgC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.b04ad992.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inpuValue, setInpuValue] = useState('');\r\n\r\n    const handleInputChange = ((e) => {\r\n        setInpuValue(e.target.value)\r\n    });\r\n\r\n    const handleSubmit = ((e) => {\r\n        e.preventDefault();\r\n\r\n        if (inpuValue.trim().length > 2) {\r\n            setCategories((categ) => [inpuValue, ...categ]);\r\n            setInpuValue('');\r\n        }\r\n\r\n    });\r\n\r\n    return (\r\n\r\n        <form onSubmit={handleSubmit}>\r\n\r\n            <input\r\n                type={'text'}\r\n                value={inpuValue}\r\n                onChange={handleInputChange}\r\n            />\r\n\r\n        </form>\r\n\r\n    );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n};","const APIKEY = '0NuttsaCx4253ui7E9STekurd3bR7vxZ';\r\n\r\nexport const getGifs = (async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${APIKEY}`;\r\n    const res = await fetch(url);\r\n    const {data} = await res.json();\r\n\r\n    const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n});","import * as React from 'react';\r\n//props\r\nexport const GifGridItem = (({id, title, url}) => {\r\n    //props\r\n    console.log({id, title, url});\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInDownBig\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n});","import * as React from 'react';\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\nimport {GifGridItem} from \"./GifGridItem\";\r\n\r\nexport const GifGrid = (({category}) => {\r\n\r\n    const {data: images, loading} = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeInDownBig\">{category}</h3>\r\n\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                {/*Cuando no se ponen {} y se pone () es un return implicito!!*/}\r\n                {images.map((img) => (\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img}\r\n                    />\r\n                    /*<li key={id}> {title} </li>*/\r\n                ))}\r\n            </div>\r\n\r\n\r\n        </>\r\n\r\n    );\r\n});","import {useEffect, useState} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ((category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n            .then(imgs => {\r\n\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                    \r\n                })\r\n            })\r\n\r\n    }, [category])\r\n\r\n    return state; // {data: [], loading: true}\r\n\r\n});","import React, {useState} from 'react';\r\nimport {AddCategory} from \"./components/AddCategory\";\r\nimport {GifGrid} from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = ((props) => {\r\n    //No se hace esto a menos que nunca cambie\r\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n    const [categories, setCategories] = useState(['One Punch']);\r\n\r\n    /*    const handleAdd = (() => { //operador spread ...\r\n            setCategories([...categories, 'nuevoElemento']);//'nuevoElemento',...categories\r\n            //setCategories( cat =>  [...cat, 'NuevoElemento'] );\r\n        });*/\r\n\r\n\r\n    return (\r\n        <>{/*Fragment*/}\r\n            <h2>GifExpertApp</h2>\r\n\r\n            <AddCategory setCategories={setCategories}/>\r\n\r\n            <hr/>\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map((category) => (\r\n                        //Key no puede ser el indice\r\n                        <GifGrid\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                        /*<li key={categorie}> {categorie} </li>*/\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n\r\n});\r\n\r\n//export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from \"./GifExpertApp\";\n\n\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}